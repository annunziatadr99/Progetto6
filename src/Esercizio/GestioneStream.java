package Esercizio; import java.time.LocalDate; import java.util.List; import java.util.stream.Collectors; public class GestioneStream { public static List<Product> getProductBook100(List<Product> products) { return products.stream() .filter(product -> product.getCategory().equals("Books") && product.getPrice() > 100) .collect(Collectors.toList()); } public static List<Order> getOrderProductBaby(List<Order> orders) { return orders.stream() .filter(order -> order.getProducts() .stream() .anyMatch(product -> product.getCategory().equals("Baby"))) .collect(Collectors.toList()); } public static List<Product> getOrderProductBoys(List<Product> products) { return products.stream() .filter(product -> product.getCategory().equals("Boys")) .peek(product -> product.setPrice(product.getPrice() * 0.9)) .collect(Collectors.toList()); } public static List<Product> getOrderCustomerTier(List<Order> orders) { LocalDate inizio = LocalDate.of(2021, 2, 1); LocalDate fine = LocalDate.of(2021, 4, 1); return orders.stream() .filter(order -> order.getCustomer().getTier() == 2) .filter(order -> !order.getOrderDate().isBefore(inizio) && !order.getOrderDate().isAfter(fine)) .flatMap(order -> order.getProducts().stream()) .collect(Collectors.toList()); } }